{"version":3,"sources":["components/CurrencyRow.js","App.js","serviceWorker.js","index.js"],"names":["CurrencyRow","currencyOptions","selectedCurrency","onChangeCurrency","amount","onChangeAmount","type","className","value","onChange","map","option","key","URL","App","toAmount","fromAmount","useState","currOptions","setCurrOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountIsFromCurrency","setAmountIsFromCurrency","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","sort","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gPAiBeA,MAff,YAAqG,IAA/EC,EAA8E,EAA9EA,gBAAiBC,EAA6D,EAA7DA,iBAAkBC,EAA2C,EAA3CA,iBAAkBC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,eAC/E,OACI,6BACG,2BAAOC,KAAK,SAASC,UAAU,QAASC,MAAQJ,EAAQK,SAAUJ,IAClE,4BAAQG,MAASN,EAAkBO,SAAYN,GAC1CF,EAAgBS,KAAI,SAAAC,GAAM,OAE3B,4BAAQH,MAAOG,EAAQC,IAAKD,GAASA,SCL9CE,EAAM,yCAuFGC,MArFf,WAAgB,IASVC,EAAUC,EATD,EAEwBC,mBAAS,IAFjC,mBAEPC,EAFO,KAEMC,EAFN,OAG0BF,qBAH1B,mBAGPG,EAHO,KAGOC,EAHP,OAIsBJ,qBAJtB,mBAIPK,EAJO,KAIKC,EAJL,OAK0BN,qBAL1B,mBAKPO,EALO,KAKOC,EALP,OAMcR,mBAAS,GANvB,mBAMPb,EANO,KAMCsB,EAND,OAO0CT,oBAAS,GAPnD,mBAOPU,EAPO,KAOeC,EAPf,KA0Db,OAhDGD,GACDX,EAAaZ,EACbW,EAAWX,EAASoB,IAEpBT,EAAWX,EACXY,EAAaZ,EAASoB,GAGxBK,qBAAU,WACRC,MAAMjB,GACLkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAE9CnB,EAAe,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UAC/CjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAK5B,IAGHN,qBAAU,WACW,MAAhBT,GAAsC,MAAdE,GAE7BQ,MAAM,GAAD,OAAIjB,EAAJ,iBAAgBO,EAAhB,oBAAwCE,IAC5CS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKI,MAAMhB,SAExC,CAACF,EAAcE,IAgBhB,yBAAKf,UAAU,aACd,gCACE,yDAEF,yBAAKA,UAAU,aACb,uCACA,kBAAC,EAAD,CACAN,gBAAmBiB,EAAYsB,OAC/BtC,iBAAmBkB,EACnBjB,iBAAqB,SAAAsC,GAAC,OAAIpB,EAAiBoB,EAAEC,OAAOlC,QACpDJ,OAAUY,EACVX,eAxBL,SAAgCoC,GAC9Bf,EAAUe,EAAEC,OAAOlC,OACnBoB,GAAwB,MAwBrB,yBAAKrB,UAAU,SAAf,OACA,kBAAC,EAAD,CACAN,gBAAmBiB,EAAYsB,OAC/BtC,iBAAmBoB,EACnBnB,iBAAqB,SAAAsC,GAAC,OAAIlB,EAAekB,EAAEC,OAAOlC,QAClDJ,OAAUW,EACVV,eA1BL,SAA8BoC,GAC5Bf,EAAUe,EAAEC,OAAOlC,OACnBoB,GAAwB,SChDRe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b19e4e88.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction CurrencyRow({currencyOptions, selectedCurrency, onChangeCurrency, amount, onChangeAmount}) {\r\n    return (\r\n        <div>\r\n           <input type=\"number\" className=\"input\"  value ={amount} onChange={onChangeAmount}/>\r\n           <select value = {selectedCurrency} onChange = {onChangeCurrency}>\r\n               {currencyOptions.map(option => (\r\n\r\n               <option value={option} key={option}>{option}</option> \r\n               ))\r\n            }\r\n           </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrencyRow\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport CurrencyRow from './components/CurrencyRow';\n\nconst URL = \"https://api.exchangeratesapi.io/latest\";\n\nfunction App() {\n\n  const[currOptions, setCurrOptions] = useState([]);\n  const[fromCurrency, setFromCurrency] = useState();\n  const[toCurrency, setToCurrency] = useState();\n  const[exchangeRate, setExchangeRate] = useState();\n  const[amount, setAmount] = useState(1);\n  const[amountIsFromCurrency, setAmountIsFromCurrency] = useState(true);\n  \n  let toAmount, fromAmount\n  if(amountIsFromCurrency){\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else{\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  useEffect(() => {\n    fetch(URL)\n    .then(res => res.json())\n    .then(data => {\n\n      const firstCurrency = Object.keys(data.rates)[0];\n    \n      setCurrOptions([data.base, ...Object.keys(data.rates)])\n      setFromCurrency(data.base)\n      setToCurrency(firstCurrency)\n      setExchangeRate(data.rates[firstCurrency]);\n      \n\n    })\n\n  }, [])\n\n\n  useEffect(() => {\n    if(fromCurrency != null && toCurrency != null){\n\n  fetch(`${URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n  .then(res => res.json())\n    .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n \n\n  function handleFromAmountChange(e){\n    setAmount(e.target.value)\n    setAmountIsFromCurrency(true)\n\n  }\n\n  function handleToAmountChange(e){\n    setAmount(e.target.value)\n    setAmountIsFromCurrency(false)\n\n  }\n\n  return (\n    <div className=\"container\">\n     <header>\n       <h1>Quick Currency Converter</h1>\n     </header>\n     <div className=\"converter\">\n       <h2>Convert</h2>\n       <CurrencyRow \n       currencyOptions = {currOptions.sort()}\n       selectedCurrency= {fromCurrency}\n       onChangeCurrency = { e => setFromCurrency (e.target.value)}\n       amount = {fromAmount}\n       onChangeAmount = {handleFromAmountChange}\n       />\n       <div className=\"equal\"> = </div>\n       <CurrencyRow \n       currencyOptions = {currOptions.sort()}\n       selectedCurrency= {toCurrency}\n       onChangeCurrency = { e => setToCurrency (e.target.value)}\n       amount = {toAmount}\n       onChangeAmount = {handleToAmountChange}\n       />\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}